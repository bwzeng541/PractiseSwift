//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `HomeLaunchScreen`.
    static let homeLaunchScreen = _R.storyboard.homeLaunchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "HomeLaunchScreen", bundle: ...)`
    static func homeLaunchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.homeLaunchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 10 files.
  struct file {
    /// Resource file `AdBlockPlug.bundle`.
    static let adBlockPlugBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "AdBlockPlug", pathExtension: "bundle")
    /// Resource file `HUDAssets.bundle`.
    static let hudAssetsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "HUDAssets", pathExtension: "bundle")
    /// Resource file `MajorJs.bundle`.
    static let majorJsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "MajorJs", pathExtension: "bundle")
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `guide_40_1.png`.
    static let guide_40_1Png = Rswift.FileResource(bundle: R.hostingBundle, name: "guide_40_1", pathExtension: "png")
    /// Resource file `guide_40_2.png`.
    static let guide_40_2Png = Rswift.FileResource(bundle: R.hostingBundle, name: "guide_40_2", pathExtension: "png")
    /// Resource file `guide_40_3.png`.
    static let guide_40_3Png = Rswift.FileResource(bundle: R.hostingBundle, name: "guide_40_3", pathExtension: "png")
    /// Resource file `guide_40_4.png`.
    static let guide_40_4Png = Rswift.FileResource(bundle: R.hostingBundle, name: "guide_40_4", pathExtension: "png")
    /// Resource file `localRes.bundle`.
    static let localResBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "localRes", pathExtension: "bundle")
    /// Resource file `text.plist`.
    static let textPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "text", pathExtension: "plist")

    /// `bundle.url(forResource: "AdBlockPlug", withExtension: "bundle")`
    static func adBlockPlugBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.adBlockPlugBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HUDAssets", withExtension: "bundle")`
    static func hudAssetsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hudAssetsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MajorJs", withExtension: "bundle")`
    static func majorJsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.majorJsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "guide_40_1", withExtension: "png")`
    static func guide_40_1Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.guide_40_1Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "guide_40_2", withExtension: "png")`
    static func guide_40_2Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.guide_40_2Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "guide_40_3", withExtension: "png")`
    static func guide_40_3Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.guide_40_3Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "guide_40_4", withExtension: "png")`
    static func guide_40_4Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.guide_40_4Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "localRes", withExtension: "bundle")`
    static func localResBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.localResBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "text", withExtension: "plist")`
    static func textPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.textPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 37 images.
  struct image {
    /// Image `Image`.
    static let image = Rswift.ImageResource(bundle: R.hostingBundle, name: "Image")
    /// Image `allowBlack`.
    static let allowBlack = Rswift.ImageResource(bundle: R.hostingBundle, name: "allowBlack")
    /// Image `buyOne.png`.
    static let buyOnePng = Rswift.ImageResource(bundle: R.hostingBundle, name: "buyOne.png")
    /// Image `guide_40_1`.
    static let guide_40_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_40_1")
    /// Image `guide_40_2`.
    static let guide_40_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_40_2")
    /// Image `guide_40_3`.
    static let guide_40_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_40_3")
    /// Image `guide_40_4`.
    static let guide_40_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guide_40_4")
    /// Image `icon_black_scancode`.
    static let icon_black_scancode = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_black_scancode")
    /// Image `icon_exclamationmark`.
    static let icon_exclamationmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_exclamationmark")
    /// Image `icon_next`.
    static let icon_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_next")
    /// Image `icon_search`.
    static let icon_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search")
    /// Image `iphone_ad`.
    static let iphone_ad = Rswift.ImageResource(bundle: R.hostingBundle, name: "iphone_ad")
    /// Image `jingxuan.png`.
    static let jingxuanPng = Rswift.ImageResource(bundle: R.hostingBundle, name: "jingxuan.png")
    /// Image `lj`.
    static let lj = Rswift.ImageResource(bundle: R.hostingBundle, name: "lj")
    /// Image `reddot`.
    static let reddot = Rswift.ImageResource(bundle: R.hostingBundle, name: "reddot")
    /// Image `shopCart_r`.
    static let shopCart_r = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopCart_r")
    /// Image `shopCart`.
    static let shopCart = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopCart")
    /// Image `topsst_b`.
    static let topsst_b = Rswift.ImageResource(bundle: R.hostingBundle, name: "topsst_b")
    /// Image `topsstb`.
    static let topsstb = Rswift.ImageResource(bundle: R.hostingBundle, name: "topsstb")
    /// Image `v2_address_edit_highlighted`.
    static let v2_address_edit_highlighted = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_address_edit_highlighted")
    /// Image `v2_address_empty`.
    static let v2_address_empty = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_address_empty")
    /// Image `v2_goback`.
    static let v2_goback = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_goback")
    /// Image `v2_home_r`.
    static let v2_home_r = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_home_r")
    /// Image `v2_home`.
    static let v2_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_home")
    /// Image `v2_increase`.
    static let v2_increase = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_increase")
    /// Image `v2_my_r`.
    static let v2_my_r = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_my_r")
    /// Image `v2_my`.
    static let v2_my = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_my")
    /// Image `v2_noselected`.
    static let v2_noselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_noselected")
    /// Image `v2_order_r`.
    static let v2_order_r = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_order_r")
    /// Image `v2_order`.
    static let v2_order = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_order")
    /// Image `v2_placeholder_full_size`.
    static let v2_placeholder_full_size = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_placeholder_full_size")
    /// Image `v2_placeholder_square`.
    static let v2_placeholder_square = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_placeholder_square")
    /// Image `v2_reduce`.
    static let v2_reduce = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_reduce")
    /// Image `v2_selected`.
    static let v2_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_selected")
    /// Image `v2_shopNoBorder`.
    static let v2_shopNoBorder = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_shopNoBorder")
    /// Image `v2_whiteShopBig`.
    static let v2_whiteShopBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "v2_whiteShopBig")
    /// Image `yellowlight`.
    static let yellowlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "yellowlight")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Image", bundle: ..., traitCollection: ...)`
    static func image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "allowBlack", bundle: ..., traitCollection: ...)`
    static func allowBlack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.allowBlack, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "buyOne.png", bundle: ..., traitCollection: ...)`
    static func buyOnePng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buyOnePng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guide_40_1", bundle: ..., traitCollection: ...)`
    static func guide_40_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_40_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guide_40_2", bundle: ..., traitCollection: ...)`
    static func guide_40_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_40_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guide_40_3", bundle: ..., traitCollection: ...)`
    static func guide_40_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_40_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "guide_40_4", bundle: ..., traitCollection: ...)`
    static func guide_40_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guide_40_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_black_scancode", bundle: ..., traitCollection: ...)`
    static func icon_black_scancode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_black_scancode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_exclamationmark", bundle: ..., traitCollection: ...)`
    static func icon_exclamationmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_exclamationmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_next", bundle: ..., traitCollection: ...)`
    static func icon_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_search", bundle: ..., traitCollection: ...)`
    static func icon_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iphone_ad", bundle: ..., traitCollection: ...)`
    static func iphone_ad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iphone_ad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jingxuan.png", bundle: ..., traitCollection: ...)`
    static func jingxuanPng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jingxuanPng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lj", bundle: ..., traitCollection: ...)`
    static func lj(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lj, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reddot", bundle: ..., traitCollection: ...)`
    static func reddot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reddot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopCart", bundle: ..., traitCollection: ...)`
    static func shopCart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shopCart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopCart_r", bundle: ..., traitCollection: ...)`
    static func shopCart_r(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shopCart_r, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "topsst_b", bundle: ..., traitCollection: ...)`
    static func topsst_b(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topsst_b, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "topsstb", bundle: ..., traitCollection: ...)`
    static func topsstb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topsstb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_address_edit_highlighted", bundle: ..., traitCollection: ...)`
    static func v2_address_edit_highlighted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_address_edit_highlighted, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_address_empty", bundle: ..., traitCollection: ...)`
    static func v2_address_empty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_address_empty, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_goback", bundle: ..., traitCollection: ...)`
    static func v2_goback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_goback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_home", bundle: ..., traitCollection: ...)`
    static func v2_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_home_r", bundle: ..., traitCollection: ...)`
    static func v2_home_r(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_home_r, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_increase", bundle: ..., traitCollection: ...)`
    static func v2_increase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_increase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_my", bundle: ..., traitCollection: ...)`
    static func v2_my(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_my, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_my_r", bundle: ..., traitCollection: ...)`
    static func v2_my_r(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_my_r, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_noselected", bundle: ..., traitCollection: ...)`
    static func v2_noselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_noselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_order", bundle: ..., traitCollection: ...)`
    static func v2_order(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_order, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_order_r", bundle: ..., traitCollection: ...)`
    static func v2_order_r(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_order_r, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_placeholder_full_size", bundle: ..., traitCollection: ...)`
    static func v2_placeholder_full_size(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_placeholder_full_size, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_placeholder_square", bundle: ..., traitCollection: ...)`
    static func v2_placeholder_square(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_placeholder_square, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_reduce", bundle: ..., traitCollection: ...)`
    static func v2_reduce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_reduce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_selected", bundle: ..., traitCollection: ...)`
    static func v2_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_shopNoBorder", bundle: ..., traitCollection: ...)`
    static func v2_shopNoBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_shopNoBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "v2_whiteShopBig", bundle: ..., traitCollection: ...)`
    static func v2_whiteShopBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.v2_whiteShopBig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yellowlight", bundle: ..., traitCollection: ...)`
    static func yellowlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yellowlight, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `AddressSearchView`.
    static let addressSearchView = _R.nib._AddressSearchView()
    /// Nib `Searchcell`.
    static let searchcell = _R.nib._Searchcell()
    /// Nib `WebBottomTools`.
    static let webBottomTools = _R.nib._WebBottomTools()
    /// Nib `WebTopTools`.
    static let webTopTools = _R.nib._WebTopTools()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddressSearchView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addressSearchView) instead")
    static func addressSearchView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressSearchView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Searchcell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchcell) instead")
    static func searchcell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchcell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WebBottomTools", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.webBottomTools) instead")
    static func webBottomTools(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.webBottomTools)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WebTopTools", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.webTopTools) instead")
    static func webTopTools(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.webTopTools)
    }
    #endif

    static func addressSearchView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressSearchView? {
      return R.nib.addressSearchView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressSearchView
    }

    static func searchcell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Searchcell? {
      return R.nib.searchcell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Searchcell
    }

    static func webBottomTools(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WebBottomTools? {
      return R.nib.webBottomTools.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WebBottomTools
    }

    static func webTopTools(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WebTopTools? {
      return R.nib.webTopTools.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WebTopTools
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _AddressSearchView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AddressSearchView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressSearchView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressSearchView
      }

      fileprivate init() {}
    }

    struct _Searchcell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Searchcell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Searchcell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Searchcell
      }

      fileprivate init() {}
    }

    struct _WebBottomTools: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WebBottomTools"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WebBottomTools? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WebBottomTools
      }

      fileprivate init() {}
    }

    struct _WebTopTools: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WebTopTools"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WebTopTools? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WebTopTools
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try homeLaunchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct homeLaunchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeController

      let bundle = R.hostingBundle
      let name = "HomeLaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PractiseSwift.HomeController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
